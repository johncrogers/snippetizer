{
  "Flow": {
    "prefix": "Flow",
    "body": [
      "import React, { useEffect, useState } from 'react';",
      "",
      "import { Dispatch } from 'redux';",
      "import { RouteComponentProps } from 'react-router';",
      "import { Button } from 'reactstrap';",
      "",
      "import { FetchConnect } from 'helpers/FetchConnect';",
      "import { FetchControlledFlow } from 'views/common/FetchControlledFlow';",
      "",
      "export const $1Flow: React.FC<I$1FlowPropTypes> = (props: I$1FlowPropTypes) => {",
      "  const { dispatch, text } = props;",
      "",
      "  const [isLoaded, setIsLoaded] = useState(false);",
      "  const [isSatisfied, setIsSatisfied] = useState(true);",
      "",
      "  useEffect(() => {",
      "    // Mount",
      "    setTimeout(() => {",
      "      setIsLoaded(true);",
      "    }, 1000);",
      "",
      "    return () => {",
      "      // Unmount",
      "    };",
      "  }, []);",
      "",
      "  console.group('$1');",
      "  console.group('props:', props);",
      "  console.table(props);",
      "  console.groupEnd();",
      "  console.log('props', props);",
      "  console.groupEnd();",
      "",
      "  return (",
      "    <FetchControlledFlow",
      "      {...{",
      "        goal: <div>Goal</div>,",
      "        requirements: [",
      "          {",
      "            component: <div>Loading...</div>,",
      "            isSatisfied: isLoaded,",
      "            name: 'Loading',",
      "          },",
      "          {",
      "            component: (",
      "              <Button",
      "                color='info'",
      "                onClick={() => {",
      "                  setIsSatisfied(true);",
      "                }}",
      "              >",
      "                Satisfy",
      "              </Button>",
      "            ),",
      "            isSatisfied,",
      "            name: 'Second',",
      "          },",
      "        ],",
      "      }}",
      "    />",
      "  );",
      "};",
      "",
      "export default FetchConnect({",
      "  ConnectedComponent: $1Flow,",
      "  state: { stores: [] },",
      "});",
      "",
      "export interface I$1FlowPropTypes",
      "  extends IRootStateType,",
      "    RouteComponentProps<{}> {",
      "  text: string;",
      "  dispatch: Dispatch;",
      "}",
      ""
    ]
  },
  "Form": {
    "prefix": "Form",
    "body": [
      "import React, { useEffect, useState } from 'react';",
      "",
      "import { Dispatch } from 'redux';",
      "import { RouteComponentProps } from 'react-router';",
      "import { Form, Button } from 'reactstrap';",
      "import { Field, InjectedFormProps, formValueSelector } from 'redux-form';",
      "import { toast } from 'react-toastify';",
      "",
      "import { BEM } from 'helpers/BEM.helper';",
      "import { FetchFormConnect } from 'helpers/FetchFormConnect';",
      "import { FetchInput } from 'views/common/forms/fields/FetchInput';",
      "",
      "export const $1Form: React.FC<I$1FormPropTypes> = (props: I$1FormPropTypes) => {",
      "  const { dispatch, textValue } = props;",
      "",
      "  const [isSatisfied, setIsSatisfied] = useState(true);",
      "",
      "  useEffect(() => {",
      "    // Mount",
      "",
      "    return () => {",
      "      // Unmount",
      "    };",
      "  }, []);",
      "",
      "  const classes = new BEM({",
      "    block: { name: '$1Form' },",
      "    elements: [{ name: 'temporaryPassword', extras: [] }],",
      "  });",
      "",
      "  console.group('$1');",
      "  console.group('props:', props);",
      "  console.table(props);",
      "  console.groupEnd();",
      "  console.log('textValue', textValue);",
      "  console.groupEnd();",
      "",
      "  return (",
      "    <Form",
      "      className={classes.getBlockClassNames()}",
      "      onSubmit={props.handleSubmit}",
      "    >",
      "      <Field",
      "        {...{",
      "          className: classes.getElementClassNames('text'),",
      "          component: FetchInput,",
      "          label: 'Text Field',",
      "          name: 'text',",
      "          type: 'text',",
      "        }}",
      "      />",
      "      <Button",
      "        type='submit'",
      "        color='info'",
      "        className={classes.getElementClassNames('submitButton')}",
      "      >",
      "        Submit",
      "      </Button>",
      "    </Form>",
      "  );",
      "};",
      "",
      "export default FetchFormConnect({",
      "  FormComponent: $1Form,",
      "  formOptions: {",
      "    form: '$1Form',",
      "    onSubmitFail: () => {",
      "      toast.error('Please fix the error(s) below and try again');",
      "    },",
      "    validate: (values: I$1FormValues) => {",
      "      const errors: I$1FormErrors = {};",
      "      const requiredFields: $1FormValuesIndex[] = ['text'];",
      "",
      "      requiredFields.forEach((fieldName: $1FormValuesIndex) => {",
      "        if (!values[fieldName]) {",
      "          errors[fieldName] = 'Required';",
      "        }",
      "      });",
      "",
      "      return errors;",
      "    },",
      "  },",
      "  state: {",
      "    mapStateToProps: (rootState: IRootStateType) => {",
      "      const { currentUser } = rootState;",
      "",
      "      return {",
      "        initialValues: {",
      "          userId: currentUser.userId,",
      "          textValue: formValueSelector('$1Form')(rootState, 'text'),",
      "        },",
      "      } as any;",
      "    },",
      "  },",
      "});",
      "",
      "export interface I$1FormPropTypes",
      "  extends IRootStateType,",
      "    RouteComponentProps<{}>,",
      "    InjectedFormProps<I$1FormValues> {",
      "  dispatch: Dispatch;",
      "  textValue: string;",
      "}",
      "type $1FormValuesIndex = 'text';",
      "export interface I$1FormValues {",
      "  text?: string;",
      "}",
      "interface I$1FormErrors {",
      "  text?: string;",
      "}",
      ""
    ]
  },
  "FunctionalComponent": {
    "prefix": "FunctionalComponent",
    "body": [
      "import React, { useEffect, useState } from 'react';",
      "",
      "import { Dispatch } from 'redux';",
      "",
      "import { FetchConnect } from 'helpers/FetchConnect';",
      "import { RouteComponentProps } from 'react-router';",
      "",
      "export const $1: React.FC<I$1PropTypes> = (props: I$1PropTypes) => {",
      "  const { dispatch, text } = props;",
      "",
      "  const [isSatisfied, setIsSatisfied] = useState(true);",
      "",
      "  useEffect(() => {",
      "    // Mount",
      "",
      "    return () => {",
      "      // Unmount",
      "    };",
      "  }, []);",
      "",
      "  console.group('$1');",
      "  console.group('props:', props);",
      "  console.table(props);",
      "  console.groupEnd();",
      "  console.log('props', props);",
      "  console.groupEnd();",
      "",
      "  return (",
      "    <div",
      "      onClick={() => {",
      "        setIsSatisfied(!isSatisfied);",
      "      }}",
      "    >",
      "      {text}: {isSatisfied}",
      "    </div>",
      "  );",
      "};",
      "",
      "export default FetchConnect({",
      "  ConnectedComponent: $1,",
      "  state: { stores: [''] },",
      "});",
      "",
      "export interface I$1PropTypes extends IRootStateType, RouteComponentProps<{}> {",
      "  text: string;",
      "  dispatch: Dispatch;",
      "}",
      ""
    ]
  },
  "Modal": {
    "prefix": "Modal",
    "body": [
      "import React, { useEffect, useState } from 'react';",
      "",
      "import { RouteComponentProps } from 'react-router';",
      "import { Dispatch } from 'redux';",
      "",
      "import { BEM } from 'helpers/BEM.helper';",
      "import { FetchConnect } from 'helpers/FetchConnect';",
      "import FetchModal from 'views/common/modals/FetchModal';",
      "",
      "export const $1Modal: React.FC<I$1ModalPropTypes> = (",
      "  props: I$1ModalPropTypes",
      ") => {",
      "  const { dispatch, text } = props;",
      "",
      "  const [isSatisfied, setIsSatisfied] = useState(true);",
      "",
      "  useEffect(() => {",
      "    // Mount",
      "",
      "    return () => {",
      "      // Unmount",
      "    };",
      "  }, []);",
      "",
      "  const classes = new BEM({",
      "    block: { name: '$1Modal' },",
      "    elements: [{ name: 'temporaryPassword', extras: [] }],",
      "  });",
      "",
      "  console.group('$1');",
      "  console.group('props:', props);",
      "  console.table(props);",
      "  console.groupEnd();",
      "  console.log('props', props);",
      "  console.groupEnd();",
      "",
      "  return (",
      "    <FetchModal title='$1' id='$1'>",
      "      <div>Body</div>",
      "    </FetchModal>",
      "  );",
      "};",
      "",
      "$1Modal.defaultProps = {",
      "  text: '$1Modal',",
      "};",
      "",
      "export default FetchConnect({",
      "  ConnectedComponent: $1Modal,",
      "  state: { stores: [] },",
      "});",
      "",
      "export interface I$1ModalPropTypes",
      "  extends IRootStateType,",
      "    RouteComponentProps<{}> {",
      "  text: string;",
      "  dispatch: Dispatch;",
      "}",
      ""
    ]
  },
  "Page": {
    "prefix": "Page",
    "body": [
      "import React, { useEffect, useState } from 'react';",
      "",
      "import { Dispatch } from 'redux';",
      "import { RouteComponentProps } from 'react-router';",
      "import { Container, Row, Col } from 'reactstrap';",
      "",
      "import { FetchConnect } from 'helpers/FetchConnect';",
      "import { BEM } from 'helpers/BEM.helper';",
      "",
      "export const $1Page: React.FC<I$1PagePropTypes> = (props: I$1PagePropTypes) => {",
      "  const { dispatch, text } = props;",
      "",
      "  const [isSatisfied, setIsSatisfied] = useState(true);",
      "",
      "  useEffect(() => {",
      "    return () => {",
      "      document.body.classList.toggle('$1-page');",
      "    };",
      "  });",
      "  useEffect(() => {",
      "    document.body.classList.toggle('$1-page');",
      "  });",
      "  const classes = new BEM({",
      "    block: { name: '$1' },",
      "    elements: [{ name: 'title' }, { name: 'body' }],",
      "  });",
      "",
      "  console.group('$1');",
      "  console.group('props:', props);",
      "  console.table(props);",
      "  console.groupEnd();",
      "  console.log('props', props);",
      "  console.groupEnd();",
      "",
      "  return (",
      "    <Container className={classes.getBlockClassNames()} fluid={true}>",
      "      <Row>",
      "        <Col sm='12' md={{ size: 4, offset: 4 }}>",
      "          Body",
      "        </Col>",
      "      </Row>",
      "    </Container>",
      "  );",
      "};",
      "",
      "$1Page.defaultProps = {",
      "  text: '$1Page',",
      "};",
      "",
      "export default FetchConnect({",
      "  ConnectedComponent: $1Page,",
      "  state: { stores: [] },",
      "});",
      "",
      "export interface I$1PagePropTypes",
      "  extends IRootStateType,",
      "    RouteComponentProps<{}> {",
      "  text: string;",
      "  dispatch: Dispatch;",
      "}",
      ""
    ]
  },
  "Table": {
    "prefix": "Table",
    "body": [
      "import React, { useEffect, useState } from 'react';",
      "",
      "import { Dispatch } from 'redux';",
      "import { RouteComponentProps } from 'react-router';",
      "",
      "import { FetchConnect } from 'helpers/FetchConnect';",
      "import { BEM } from 'helpers/BEM.helper';",
      "import { FetchTable } from 'views/common/tables/FetchTable';",
      "",
      "export const $1Table: React.FC<I$1TablePropTypes> = (",
      "  props: I$1TablePropTypes",
      ") => {",
      "  const { dispatch, text } = props;",
      "",
      "  const [isSatisfied, setIsSatisfied] = useState(true);",
      "",
      "  useEffect(() => {",
      "    // Mount",
      "",
      "    return () => {",
      "      // Unmount",
      "    };",
      "  }, []);",
      "",
      "  const classes = new BEM({",
      "    block: { name: '$1Table' },",
      "    elements: [{ name: 'temporaryPassword', extras: [] }],",
      "  });",
      "",
      "  console.group('$1');",
      "  console.group('props:', props);",
      "  console.table(props);",
      "  console.groupEnd();",
      "  console.log('props', props);",
      "  console.groupEnd();",
      "",
      "  return (",
      "    <FetchTable",
      "      {...{",
      "        className: '-striped -highlight primary-pagination',",
      "        columns: [",
      "          {",
      "            Header: 'First Name',",
      "            accessor: 'firstName',",
      "          },",
      "          {",
      "            Header: 'Last Name',",
      "            accessor: 'lastName',",
      "          },",
      "        ],",
      "        data: [{ firstName: 'John', lastName: 'Rogers' }],",
      "        defaultSorted: [{ id: 'name', desc: false }],",
      "        manual: false,",
      "        minRows: 20,",
      "        filterable: true,",
      "        pageSizeOptions: [20, 50, 100],",
      "        showPaginationBottom: true,",
      "        showPaginationTop: false,",
      "      }}",
      "    />",
      "  );",
      "};",
      "",
      "export default FetchConnect({",
      "  ConnectedComponent: $1Table,",
      "  state: { stores: [] },",
      "});",
      "",
      "export interface I$1TablePropTypes",
      "  extends IRootStateType,",
      "    RouteComponentProps<{}> {",
      "  text: string;",
      "  dispatch: Dispatch;",
      "}",
      ""
    ]
  },
  "bem": {
    "prefix": "bem",
    "body": [
      "const classes = new BEM({",
      "  block: { name: '$1' },",
      "  elements: [",
      "    { name: '$2', extras: [] },",
      "    { name: '$3', extras: [] },",
      "  ],",
      "});",
      ""
    ]
  },
  "funca": {
    "prefix": "funca",
    "body": ["($1) => {", "  $2;", "};", ""]
  },
  "group": {
    "prefix": "group",
    "body": [
      "console.group('$1');",
      "console.group('$2:', $2);",
      "console.table($2);",
      "console.groupEnd();",
      "console.log('$3', $3);",
      "console.groupEnd();",
      ""
    ]
  }
}
